/* Generated by the Nim Compiler v0.19.4 */
/*   (c) 2018 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI38289 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3866 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI38239 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI38016 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI38015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI116 = {size: 0,kind: 41,base: null,node: null,finalizer: null};
var NTI38352 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI3850 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3842 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3846 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3858 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI104 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI15346 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI3808 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3918 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI114 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI138 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI140 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI3912 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI3826 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3828 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI3862 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI3862 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3862.node = NNI3862;
var NNI3828 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3828.node = NNI3828;
NTI3912.base = NTI3826;
NTI3918.base = NTI3826;
var NNI3826 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI3912, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI140, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI138, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI138, name: "trace", sons: null}, 
{kind: 1, offset: "raise_id", len: 0, typ: NTI114, name: "raise_id", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI3918, name: "up", sons: null}]};
NTI3826.node = NNI3826;
var NNI3808 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3808.node = NNI3808;
NTI3826.base = NTI3808;
NTI3828.base = NTI3826;
NTI3862.base = NTI3828;
var NNI15346 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI140, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI104, name: "Field1", sons: null}]};
NTI15346.node = NNI15346;
var NNI3858 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3858.node = NNI3858;
NTI3858.base = NTI3828;
var NNI3846 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3846.node = NNI3846;
var NNI3842 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3842.node = NNI3842;
NTI3842.base = NTI3828;
NTI3846.base = NTI3842;
var NNI3850 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3850.node = NNI3850;
NTI3850.base = NTI3828;
NTI38352.base = NTI116;
NTI38016.base = NTI116;
NTI38015.base = NTI38016;
NTI38239.base = NTI38016;
var NNI3866 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI3866.node = NNI3866;
NTI3866.base = NTI3828;
NTI38289.base = NTI116;

function makeNimstrLit(c_16225) {
		  var ln = c_16225.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_16225.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_17230, src_17231, ti_17232) {
	var result_17655 = null;

		switch (ti_17232.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_17201(ti_17232))) {
			result_17655 = src_17231;
			}
			else {
				result_17655 = [src_17231[0], src_17231[1]];
			}
			
			break;
		case 19:
			      if (dest_17230 === null || dest_17230 === undefined) {
        dest_17230 = {};
      }
      else {
        for (var key in dest_17230) { delete dest_17230[key]; }
      }
      for (var key in src_17231) { dest_17230[key] = src_17231[key]; }
      result_17655 = dest_17230;
    
			break;
		case 18:
		case 17:
			if (!((ti_17232.base == null))) {
			result_17655 = nimCopy(dest_17230, src_17231, ti_17232.base);
			}
			else {
			if ((ti_17232.kind == 17)) {
			result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {m_type: ti_17232} : dest_17230;
			}
			else {
				result_17655 = (dest_17230 === null || dest_17230 === undefined) ? {} : dest_17230;
			}
			}
			nimCopyAux(result_17655, src_17231, ti_17232.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_17231 === null) {
        result_17655 = null;
      }
      else {
        if (dest_17230 === null || dest_17230 === undefined) {
          dest_17230 = new Array(src_17231.length);
        }
        else {
          dest_17230.length = src_17231.length;
        }
        result_17655 = dest_17230;
        for (var i = 0; i < src_17231.length; ++i) {
          result_17655[i] = nimCopy(result_17655[i], src_17231[i], ti_17232.base);
        }
      }
    
			break;
		case 28:
			      if (src_17231 !== null) {
        result_17655 = src_17231.slice(0);
      }
    
			break;
		default: 
			result_17655 = src_17231;
			break;
		}

	return result_17655;

}

function arrayConstr(len_17716, value_17717, typ_17718) {
		    var result = new Array(len_17716);
    for (var i = 0; i < len_17716; ++i) result[i] = nimCopy(null, value_17717, typ_17718);
    return result;
  

	
}

function cstrToNimstr(c_16242) {
		  var ln = c_16242.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_16242.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_16242.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_16259) {
		  if (s_16259 === null) return "";
  var len = s_16259.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_16259[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_16259[i] < 128)
      asciiPart[i] = fcc(s_16259[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_15818, ename_15819) {
		e_15818.name = ename_15819;
		if ((excHandler == 0)) {
		unhandledException(e_15818);
		}
		
		e_15818.trace = nimCopy(null, raw_write_stack_trace_15655(), NTI138);
		throw e_15818;

	
}

function chckRange(i_17754, a_17755, b_17756) {
			var Tmp1;

	var result_17757 = 0;

	BeforeRet: do {
			if (!(a_17755 <= i_17754)) Tmp1 = false; else {				Tmp1 = (i_17754 <= b_17756);			}		if (Tmp1) {
		result_17757 = i_17754;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_17757;

}

function chckIndx(i_17735, a_17736, b_17737) {
			var Tmp1;

	var result_17738 = 0;

	BeforeRet: do {
			if (!(a_17736 <= i_17735)) Tmp1 = false; else {				Tmp1 = (i_17735 <= b_17737);			}		if (Tmp1) {
		result_17738 = i_17735;
		break BeforeRet;
		}
		else {
		raiseIndexError();
		}
		
	} while (false);

	return result_17738;

}

function addInt(a_16603, b_16604) {
		    var result = a_16603 + b_16604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function subInt(a_16621, b_16622) {
		    var result = a_16621 - b_16622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function reraiseException() {
		if ((lastJSError == null)) {
		var e_16033 = null;
		e_16033 = {m_type: NTI3866, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16033.message = nimCopy(null, makeNimstrLit("no exception to reraise"), NTI138);
		e_16033.parent = null;
		raiseException(e_16033, "ReraiseError");
		}
		else {
			if ((excHandler == 0)) {
			if (is_nim_exception_15277()) {
			unhandledException(lastJSError);
			}
			
			}
			
			throw lastJSError;
		}
		

	
}
var nimvm_7173 = false;
var nim_program_result = 0;
var global_raise_hook_13418 = [null];
var local_raise_hook_13423 = [null];
var out_of_mem_hook_13426 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }

function new_seq_39820(len_39824) {
	var result_39826 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_39826 = new Array(len_39824); for (var i=0;i<len_39824;++i) {result_39826[i]=null;}	framePtr = F.prev;

	return result_39826;

}

function is_fat_pointer_17201(ti_17203) {
	var result_17204 = false;

	BeforeRet: do {
		result_17204 = !((ConstSet1[ti_17203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_17204;

}

function nimCopyAux(dest_17235, src_17236, n_17238) {
		switch (n_17238.kind) {
		case 0:
			break;
		case 1:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
    
			break;
		case 2:
			L1: do {
				var i_17628 = 0;
				var colontmp__17630 = 0;
				colontmp__17630 = (n_17238.len - 1);
				var res_17633 = 0;
				L2: do {
						L3: while (true) {
						if (!(res_17633 <= colontmp__17630)) break L3;
							i_17628 = res_17633;
							nimCopyAux(dest_17235, src_17236, n_17238.sons[i_17628]);
							res_17633 += 1;
						}
				} while(false);
			} while(false);
			break;
		case 3:
			      dest_17235[n_17238.offset] = nimCopy(dest_17235[n_17238.offset], src_17236[n_17238.offset], n_17238.typ);
      for (var i = 0; i < n_17238.sons.length; ++i) {
        nimCopyAux(dest_17235, src_17236, n_17238.sons[i][1]);
      }
    
			break;
		}

	
}

function add_13438(x_13441, x_13441_Idx, y_13442) {
		      if (x_13441[x_13441_Idx] === null) { x_13441[x_13441_Idx] = []; }
      var off = x_13441[x_13441_Idx].length;
      x_13441[x_13441_Idx].length += y_13442.length;
      for (var i = 0; i < y_13442.length; ++i) {
        x_13441[x_13441_Idx][off+i] = y_13442.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_15341(f_15343) {
					var Tmp3;

	var result_15344 = [null];

		var it_15352 = f_15343;
		var i_15354 = 0;
		var total_15356 = 0;
		var temp_frames_15363 = arrayConstr(64, {Field0: null, Field1: 0}, NTI15346);
		L1: do {
				L2: while (true) {
					if (!!((it_15352 == null))) Tmp3 = false; else {						Tmp3 = (i_15354 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_15363[i_15354].Field0 = it_15352.procname;
					temp_frames_15363[i_15354].Field1 = it_15352.line;
					i_15354 += 1;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_15352 == null))) break L5;
					total_15356 += 1;
					it_15352 = it_15352.prev;
				}
		} while(false);
		result_15344[0] = nimCopy(null, [], NTI138);
		if (!((total_15356 == i_15354))) {
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("(")); } else { result_15344[0] = makeNimstrLit("("); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr(((total_15356 - i_15354))+"")); } else { result_15344[0] = cstrToNimstr(((total_15356 - i_15354))+"").slice(); };
		if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_15344[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_15628 = 0;
			var colontmp__15635 = 0;
			colontmp__15635 = (i_15354 - 1);
			var res_15638 = colontmp__15635;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_15638)) break L8;
						j_15628 = res_15638;
						add_13438(result_15344, 0, temp_frames_15363[j_15628].Field0);
						if ((0 < temp_frames_15363[j_15628].Field1)) {
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit(", line: ")); } else { result_15344[0] = makeNimstrLit(", line: "); };
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(cstrToNimstr((temp_frames_15363[j_15628].Field1)+"")); } else { result_15344[0] = cstrToNimstr((temp_frames_15363[j_15628].Field1)+"").slice(); };
						}
						
						if (result_15344[0] != null) { result_15344[0] = (result_15344[0]).concat(makeNimstrLit("\x0A")); } else { result_15344[0] = makeNimstrLit("\x0A"); };
						res_15638 -= 1;
					}
			} while(false);
		} while(false);

	return result_15344[0];

}

function raw_write_stack_trace_15655() {
	var result_15657 = null;

		if (!((framePtr == null))) {
		result_15657 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A")).concat(aux_write_stack_trace_15341(framePtr)), NTI138);
		}
		else {
			result_15657 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI138);
		}
		

	return result_15657;

}

function unhandledException(e_15719) {
		var buf_15720 = [[]];
		if (!(((e_15719.message != null ? e_15719.message.length : 0) == 0))) {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(e_15719.message); } else { buf_15720[0] = e_15719.message.slice(); };
		}
		else {
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_15720[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit(" [")); } else { buf_15720[0] = makeNimstrLit(" ["); };
		add_13438(buf_15720, 0, e_15719.name);
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(makeNimstrLit("]\x0A")); } else { buf_15720[0] = makeNimstrLit("]\x0A"); };
		if (buf_15720[0] != null) { buf_15720[0] = (buf_15720[0]).concat(raw_write_stack_trace_15655()); } else { buf_15720[0] = raw_write_stack_trace_15655().slice(); };
		var cbuf_15801 = toJSStr(buf_15720[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_15801);
  }
  else {
    throw cbuf_15801;
  }
  

	
}

function raiseRangeError() {
		var e_16125 = null;
		e_16125 = {m_type: NTI3862, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16125.message = nimCopy(null, makeNimstrLit("value out of range"), NTI138);
		e_16125.parent = null;
		raiseException(e_16125, "RangeError");

	
}

function raiseIndexError() {
		var e_16155 = null;
		e_16155 = {m_type: NTI3858, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16155.message = nimCopy(null, makeNimstrLit("index out of bounds"), NTI138);
		e_16155.parent = null;
		raiseException(e_16155, "IndexError");

	
}

function new_seq_38347(len_38351) {
	var result_38353 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 763;
		result_38353 = new Array(len_38351); for (var i=0;i<len_38351;++i) {result_38353[i]=0;}	framePtr = F.prev;

	return result_38353;

}

function raiseOverflow() {
		var e_16065 = null;
		e_16065 = {m_type: NTI3846, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		e_16065.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI138);
		e_16065.parent = null;
		raiseException(e_16065, "OverflowError");

	
}

function sys_fatal_20437(message_20443) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 2915;
		var e_20445 = null;
		F.line = 2916;
		e_20445 = {m_type: NTI3850, parent: null, name: null, message: null, trace: null, raise_id: 0, up: null};
		F.line = 2917;
		e_20445.message = nimCopy(null, message_20443, NTI138);
		F.line = 2918;
		raiseException(e_20445, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_20432(msg_20434) {
	var F={procname:"system.raiseAssert",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3872;
		sys_fatal_20437(msg_20434);
	framePtr = F.prev;

	
}

function failed_assert_impl_20481(msg_20483) {
	var F={procname:"system.failedAssertImpl",prev:framePtr,filename:"../../../../../.choosenim/toolchains/nim-0.19.4/lib/system.nim",line:0};
	framePtr = F;
		F.line = 3879;
		raise_assert_20432(msg_20483);
	framePtr = F.prev;

	
}

function get_neighbour_cells_38034(board_38036, x_38037, y_38038) {
	var result_38040 = null;

	var F={procname:"gameoflife.getNeighbourCells",prev:framePtr,filename:"gameoflife.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 49;
			var y2_38049 = 0;
			F.line = 2104;
			var colontmp__38095 = 0;
			F.line = 2104;
			var colontmp__38096 = 0;
			F.line = 49;
			colontmp__38095 = subInt(y_38038, 1);
			F.line = 49;
			colontmp__38096 = addInt(y_38038, 1);
			F.line = 2107;
			var res_38099 = colontmp__38095;
			L2: do {
				F.line = 2108;
					L3: while (true) {
					if (!(res_38099 <= colontmp__38096)) break L3;
						F.line = 2109;
						y2_38049 = res_38099;
						L4: do {
							if (((y2_38049 < 0) || ((board_38036 != null ? board_38036.length : 0) <= y2_38049))) {
							F.line = 51;
							break L4;
							}
							
							L5: do {
								F.line = 52;
								var x2_38065 = 0;
								F.line = 2104;
								var colontmp__38087 = 0;
								F.line = 2104;
								var colontmp__38088 = 0;
								F.line = 52;
								colontmp__38087 = subInt(x_38037, 1);
								F.line = 52;
								colontmp__38088 = addInt(x_38037, 1);
								F.line = 2107;
								var res_38091 = colontmp__38087;
								L6: do {
									F.line = 2108;
										L7: while (true) {
										if (!(res_38091 <= colontmp__38088)) break L7;
											F.line = 2109;
											x2_38065 = res_38091;
											L8: do {
												if (((x2_38065 < 0) || ((board_38036[chckIndx(y2_38049, 0, board_38036.length+0-1)-0] != null ? board_38036[chckIndx(y2_38049, 0, board_38036.length+0-1)-0].length : 0) <= x2_38065))) {
												F.line = 54;
												break L8;
												}
												
												if (((x_38037 == x2_38065) && (y_38038 == y2_38049))) {
												F.line = 56;
												break L8;
												}
												
												F.line = 57;
												var Tmp9 = nimCopy(null, board_38036[chckIndx(y2_38049, 0, board_38036.length+0-1)-0][chckIndx(x2_38065, 0, board_38036[chckIndx(y2_38049, 0, board_38036.length+0-1)-0].length+0-1)-0], NTI116);
												if (result_38040 != null) { result_38040.push(Tmp9); } else { result_38040 = [Tmp9]; };
											} while(false);
											F.line = 2110;
											res_38091 = addInt(res_38091, 1);
										}
								} while(false);
							} while(false);
						} while(false);
						F.line = 2110;
						res_38099 = addInt(res_38099, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_38040;

}

function is_reproduction_38116(self_38118, living_cell_count_38119) {
	var result_38120 = false;

	var F={procname:"gameoflife.isReproduction",prev:framePtr,filename:"gameoflife.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((self_38118 == 0))) {
		F.line = 66;
		result_38120 = false;
		break BeforeRet;
		}
		
		F.line = 67;
		result_38120 = (living_cell_count_38119 == 3);
	} while (false);
	framePtr = F.prev;

	return result_38120;

}

function is_generation_38142(self_38144, living_cell_count_38145) {
		var Tmp1;

	var result_38146 = false;

	var F={procname:"gameoflife.isGeneration",prev:framePtr,filename:"gameoflife.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((self_38144 == 1))) {
		F.line = 77;
		result_38146 = false;
		break BeforeRet;
		}
		
		F.line = 78;
		F.line = 78;
		switch (living_cell_count_38145) {
		case 2:
		case 3:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_38146 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_38146;

}

function is_underpopulation_38168(self_38170, living_cell_count_38171) {
	var result_38172 = false;

	var F={procname:"gameoflife.isUnderpopulation",prev:framePtr,filename:"gameoflife.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((self_38170 == 1))) {
		F.line = 90;
		result_38172 = false;
		break BeforeRet;
		}
		
		F.line = 91;
		result_38172 = (living_cell_count_38171 <= 1);
	} while (false);
	framePtr = F.prev;

	return result_38172;

}

function is_overpopulation_38194(self_38196, living_cell_count_38197) {
	var result_38198 = false;

	var F={procname:"gameoflife.isOverpopulation",prev:framePtr,filename:"gameoflife.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((self_38196 == 1))) {
		F.line = 101;
		result_38198 = false;
		break BeforeRet;
		}
		
		F.line = 102;
		result_38198 = (4 <= living_cell_count_38197);
	} while (false);
	framePtr = F.prev;

	return result_38198;

}

function is_nim_exception_15277() {
		return lastJSError.m_type;

	
}

function next_step_38221(board_38224, board_38224_Idx) {
	var F={procname:"gameoflife.nextStep",prev:framePtr,filename:"gameoflife.nim",line:0};
	framePtr = F;
		F.line = 122;
		var new_board_38240 = nimCopy(null, [], NTI38239);
		L1: do {
			F.line = 123;
			var y_38287 = 0;
			F.line = 123;
			var row_38288 = null;
			F.line = 2352;
			var colontmp__38723 = null;
			F.line = 123;
			colontmp__38723 = board_38224[board_38224_Idx];
			F.line = 2354;
			var i_38726 = 0;
			L2: do {
				F.line = 2355;
					L3: while (true) {
					if (!(i_38726 < (colontmp__38723 != null ? colontmp__38723.length : 0))) break L3;
						F.line = 2356;
						y_38287 = i_38726;
						F.line = 2356;
						row_38288 = colontmp__38723[chckIndx(i_38726, 0, colontmp__38723.length+0-1)-0];
						F.line = 124;
						var new_row_38290 = null;
						L4: do {
							F.line = 125;
							var x_38337 = 0;
							F.line = 125;
							var cell_38338 = 0;
							F.line = 2354;
							var i_38722 = 0;
							L5: do {
								F.line = 2355;
									L6: while (true) {
									if (!(i_38722 < (row_38288 != null ? row_38288.length : 0))) break L6;
										F.line = 2356;
										x_38337 = i_38722;
										F.line = 2356;
										cell_38338 = row_38288[chckIndx(i_38722, 0, row_38288.length+0-1)-0];
										L7: do {
											F.line = 126;
											F.line = 419;
											var result_38378 = new_seq_38347(0);
											L8: do {
												F.line = 420;
												var it_38615 = 0;
												F.line = 3909;
												var colontmp__38714 = null;
												F.line = 126;
												colontmp__38714 = get_neighbour_cells_38034(board_38224[board_38224_Idx], x_38337, y_38287);
												F.line = 3911;
												var i_38717 = 0;
												F.line = 3912;
												var l_38719 = (colontmp__38714 != null ? colontmp__38714.length : 0);
												L9: do {
													F.line = 3913;
														L10: while (true) {
														if (!(i_38717 < l_38719)) break L10;
															F.line = 3914;
															it_38615 = colontmp__38714[chckIndx(i_38717, 0, colontmp__38714.length+0-1)-0];
															if ((it_38615 == 1)) {
															F.line = 421;
															var Tmp11 = nimCopy(null, it_38615, NTI116);
															if (result_38378 != null) { result_38378.push(Tmp11); } else { result_38378 = [Tmp11]; };
															}
															
															F.line = 3915;
															i_38717 = addInt(i_38717, 1);
															if (!(((colontmp__38714 != null ? colontmp__38714.length : 0) == l_38719))) {
															F.line = 3916;
															failed_assert_impl_20481(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
															}
															
														}
												} while(false);
											} while(false);
											var c_38641 = (result_38378 != null ? result_38378.length : 0);
											if ((cell_38338 == 0)) {
											if (is_reproduction_38116(cell_38338, c_38641)) {
											F.line = 129;
											var Tmp12 = nimCopy(null, 1, NTI116);
											if (new_row_38290 != null) { new_row_38290.push(Tmp12); } else { new_row_38290 = [Tmp12]; };
											}
											else {
												F.line = 131;
												var Tmp13 = nimCopy(null, 0, NTI116);
											if (new_row_38290 != null) { new_row_38290.push(Tmp13); } else { new_row_38290 = [Tmp13]; };
											}
											
											F.line = 132;
											break L7;
											}
											
											if (is_generation_38142(cell_38338, c_38641)) {
											F.line = 135;
											var Tmp14 = nimCopy(null, 1, NTI116);
											if (new_row_38290 != null) { new_row_38290.push(Tmp14); } else { new_row_38290 = [Tmp14]; };
											}
											else {
											if (is_underpopulation_38168(cell_38338, c_38641)) {
											F.line = 137;
											var Tmp15 = nimCopy(null, 0, NTI116);
											if (new_row_38290 != null) { new_row_38290.push(Tmp15); } else { new_row_38290 = [Tmp15]; };
											}
											else {
											if (is_overpopulation_38194(cell_38338, c_38641)) {
											F.line = 139;
											var Tmp16 = nimCopy(null, 0, NTI116);
											if (new_row_38290 != null) { new_row_38290.push(Tmp16); } else { new_row_38290 = [Tmp16]; };
											}
											else {
												F.line = 141;
												reraiseException();
											}
											}}
										} while(false);
										F.line = 2357;
										i_38722 = addInt(i_38722, 1);
									}
							} while(false);
						} while(false);
						F.line = 142;
						var Tmp17 = nimCopy(null, new_row_38290, NTI38289);
						if (new_board_38240 != null) { new_board_38240.push(Tmp17); } else { new_board_38240 = [Tmp17]; };
						F.line = 2357;
						i_38726 = addInt(i_38726, 1);
					}
			} while(false);
		} while(false);
		F.line = 144;
		board_38224[board_38224_Idx] = nimCopy(null, new_board_38240, NTI38015);
	framePtr = F.prev;

	
}

function nextStep(b_39031) {
	var result_39032 = null;

	var F={procname:"gameoflife_js.nextStep",prev:framePtr,filename:"gameoflife_js.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 5;
		L1: do {
			F.line = 687;
			var i_40090 = 0;
			F.line = 688;
			var result_40092 = new_seq_39820(chckRange((b_39031 != null ? b_39031.length : 0), 0, 2147483647));
			L2: do {
				F.line = 689;
				var it_39860 = null;
				F.line = 3911;
				var i_40125 = 0;
				F.line = 3912;
				var l_40127 = (b_39031 != null ? b_39031.length : 0);
				L3: do {
					F.line = 3913;
						L4: while (true) {
						if (!(i_40125 < l_40127)) break L4;
							F.line = 3914;
							it_39860 = b_39031[chckIndx(i_40125, 0, b_39031.length+0-1)-0];
							F.line = 5;
							L5: do {
								F.line = 687;
								var i_40108 = 0;
								F.line = 688;
								var result_40110 = new_seq_38347(chckRange((it_39860 != null ? it_39860.length : 0), 0, 2147483647));
								L6: do {
									F.line = 689;
									var it_40036 = 0;
									F.line = 3911;
									var i_40120 = 0;
									F.line = 3912;
									var l_40122 = (it_39860 != null ? it_39860.length : 0);
									L7: do {
										F.line = 3913;
											L8: while (true) {
											if (!(i_40120 < l_40122)) break L8;
												F.line = 3914;
												it_40036 = it_39860[chckIndx(i_40120, 0, it_39860.length+0-1)-0];
												F.line = 5;
												result_40110[chckIndx(i_40108, 0, result_40110.length+0-1)-0] = chckRange(it_40036, 0, 255);
												F.line = 691;
												i_40108 = addInt(i_40108, 1);
												F.line = 3915;
												i_40120 = addInt(i_40120, 1);
												if (!(((it_39860 != null ? it_39860.length : 0) == l_40122))) {
												F.line = 3916;
												failed_assert_impl_20481(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
												}
												
											}
									} while(false);
								} while(false);
							} while(false);
							result_40092[chckIndx(i_40090, 0, result_40092.length+0-1)-0] = nimCopy(null, result_40110, NTI38352);
							F.line = 691;
							i_40090 = addInt(i_40090, 1);
							F.line = 3915;
							i_40125 = addInt(i_40125, 1);
							if (!(((b_39031 != null ? b_39031.length : 0) == l_40127))) {
							F.line = 3916;
							failed_assert_impl_20481(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.19.4/lib/system.nim(3916, 11) `len(a) == L` seq modified while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		} while(false);
		var board_40111 = [nimCopy(null, result_40092, NTI38015)];
		F.line = 6;
		next_step_38221(board_40111, 0);
		F.line = 7;
		result_39032 = nimCopy(null, board_40111[0], NTI38015);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_39032;

}
