/* Generated by the Nim Compiler v0.20.0 */
/*   (c) 2019 Andreas Rumpf */

var framePtr = null;
var excHandler = 0;
var lastJSError = null;
if (typeof Int8Array === 'undefined') Int8Array = Array;
if (typeof Int16Array === 'undefined') Int16Array = Array;
if (typeof Int32Array === 'undefined') Int32Array = Array;
if (typeof Uint8Array === 'undefined') Uint8Array = Array;
if (typeof Uint16Array === 'undefined') Uint16Array = Array;
if (typeof Uint32Array === 'undefined') Uint32Array = Array;
if (typeof Float32Array === 'undefined') Float32Array = Array;
if (typeof Float64Array === 'undefined') Float64Array = Array;
var NTI95416 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI46666 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI95016 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI95015 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI43018 = {size: 0,kind: 41,base: null,node: null,finalizer: null};
var NTI95626 = {size: 0,kind: 24,base: null,node: null,finalizer: null};
var NTI46650 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46642 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46646 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46658 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI43006 = {size: 0,kind: 31,base: null,node: null,finalizer: null};
var NTI63156 = {size: 0, kind: 18, base: null, node: null, finalizer: null};
var NTI46608 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46714 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI43016 = {size: 0,kind: 40,base: null,node: null,finalizer: null};
var NTI43040 = {size: 0,kind: 28,base: null,node: null,finalizer: null};
var NTI43042 = {size: 0,kind: 29,base: null,node: null,finalizer: null};
var NTI46708 = {size: 0,kind: 22,base: null,node: null,finalizer: null};
var NTI46626 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46628 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NTI46662 = {size: 0, kind: 17, base: null, node: null, finalizer: null};
var NNI46662 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46662.node = NNI46662;
var NNI46628 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46628.node = NNI46628;
NTI46708.base = NTI46626;
NTI46714.base = NTI46626;
var NNI46626 = {kind: 2, len: 6, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "parent", len: 0, typ: NTI46708, name: "parent", sons: null}, 
{kind: 1, offset: "name", len: 0, typ: NTI43042, name: "name", sons: null}, 
{kind: 1, offset: "message", len: 0, typ: NTI43040, name: "msg", sons: null}, 
{kind: 1, offset: "trace", len: 0, typ: NTI43040, name: "trace", sons: null}, 
{kind: 1, offset: "raiseId", len: 0, typ: NTI43016, name: "raiseId", sons: null}, 
{kind: 1, offset: "up", len: 0, typ: NTI46714, name: "up", sons: null}]};
NTI46626.node = NNI46626;
var NNI46608 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46608.node = NNI46608;
NTI46626.base = NTI46608;
NTI46628.base = NTI46626;
NTI46662.base = NTI46628;
var NNI63156 = {kind: 2, len: 2, offset: 0, typ: null, name: null, sons: [{kind: 1, offset: "Field0", len: 0, typ: NTI43042, name: "Field0", sons: null}, 
{kind: 1, offset: "Field1", len: 0, typ: NTI43006, name: "Field1", sons: null}]};
NTI63156.node = NNI63156;
var NNI46658 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46658.node = NNI46658;
NTI46658.base = NTI46628;
var NNI46646 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46646.node = NNI46646;
var NNI46642 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46642.node = NNI46642;
NTI46642.base = NTI46628;
NTI46646.base = NTI46642;
var NNI46650 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46650.node = NNI46650;
NTI46650.base = NTI46628;
NTI95626.base = NTI43018;
NTI95016.base = NTI43018;
NTI95015.base = NTI95016;
var NNI46666 = {kind: 2, len: 0, offset: 0, typ: null, name: null, sons: []};
NTI46666.node = NNI46666;
NTI46666.base = NTI46628;
NTI95416.base = NTI43018;

function makeNimstrLit(c_65258) {
		  var ln = c_65258.length;
  var result = new Array(ln);
  for (var i = 0; i < ln; ++i) {
    result[i] = c_65258.charCodeAt(i);
  }
  return result;
  

	
}

function setConstr() {
		    var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

	
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_66227, src_66228, ti_66229) {
	var result_66419 = null;

		switch (ti_66229.kind) {
		case 21:
		case 22:
		case 23:
		case 5:
			if (!(is_fat_pointer_66201(ti_66229))) {
			result_66419 = src_66228;
			}
			else {
				result_66419 = [src_66228[0], src_66228[1]];
			}
			
			break;
		case 19:
			      if (dest_66227 === null || dest_66227 === undefined) {
        dest_66227 = {};
      }
      else {
        for (var key in dest_66227) { delete dest_66227[key]; }
      }
      for (var key in src_66228) { dest_66227[key] = src_66228[key]; }
      result_66419 = dest_66227;
    
			break;
		case 18:
		case 17:
			if (!((ti_66229.base == null))) {
			result_66419 = nimCopy(dest_66227, src_66228, ti_66229.base);
			}
			else {
			if ((ti_66229.kind == 17)) {
			result_66419 = (dest_66227 === null || dest_66227 === undefined) ? {m_type: ti_66229} : dest_66227;
			}
			else {
				result_66419 = (dest_66227 === null || dest_66227 === undefined) ? {} : dest_66227;
			}
			}
			nimCopyAux(result_66419, src_66228, ti_66229.node);
			break;
		case 24:
		case 4:
		case 27:
		case 16:
			      if (src_66228 === null) {
        result_66419 = null;
      }
      else {
        if (dest_66227 === null || dest_66227 === undefined) {
          dest_66227 = new Array(src_66228.length);
        }
        else {
          dest_66227.length = src_66228.length;
        }
        result_66419 = dest_66227;
        for (var i = 0; i < src_66228.length; ++i) {
          result_66419[i] = nimCopy(result_66419[i], src_66228[i], ti_66229.base);
        }
      }
    
			break;
		case 28:
			      if (src_66228 !== null) {
        result_66419 = src_66228.slice(0);
      }
    
			break;
		default: 
			result_66419 = src_66228;
			break;
		}

	return result_66419;

}

function arrayConstr(len_66486, value_66487, typ_66488) {
		    var result = new Array(len_66486);
    for (var i = 0; i < len_66486; ++i) result[i] = nimCopy(null, value_66487, typ_66488);
    return result;
  

	
}

function cstrToNimstr(c_65275) {
		  var ln = c_65275.length;
  var result = new Array(ln);
  var r = 0;
  for (var i = 0; i < ln; ++i) {
    var ch = c_65275.charCodeAt(i);

    if (ch < 128) {
      result[r] = ch;
    }
    else {
      if (ch < 2048) {
        result[r] = (ch >> 6) | 192;
      }
      else {
        if (ch < 55296 || ch >= 57344) {
          result[r] = (ch >> 12) | 224;
        }
        else {
            ++i;
            ch = 65536 + (((ch & 1023) << 10) | (c_65275.charCodeAt(i) & 1023));
            result[r] = (ch >> 18) | 240;
            ++r;
            result[r] = ((ch >> 12) & 63) | 128;
        }
        ++r;
        result[r] = ((ch >> 6) & 63) | 128;
      }
      ++r;
      result[r] = (ch & 63) | 128;
    }
    ++r;
  }
  return result;
  

	
}

function toJSStr(s_65292) {
		  if (s_65292 === null) return "";
  var len = s_65292.length;
  var asciiPart = new Array(len);
  var fcc = String.fromCharCode;
  var nonAsciiPart = null;
  var nonAsciiOffset = 0;
  for (var i = 0; i < len; ++i) {
    if (nonAsciiPart !== null) {
      var offset = (i - nonAsciiOffset) * 2;
      var code = s_65292[i].toString(16);
      if (code.length == 1) {
        code = "0"+code;
      }
      nonAsciiPart[offset] = "%";
      nonAsciiPart[offset + 1] = code;
    }
    else if (s_65292[i] < 128)
      asciiPart[i] = fcc(s_65292[i]);
    else {
      asciiPart.length = i;
      nonAsciiOffset = i;
      nonAsciiPart = new Array((len - i) * 2);
      --i;
    }
  }
  asciiPart = asciiPart.join("");
  return (nonAsciiPart === null) ?
      asciiPart : asciiPart + decodeURIComponent(nonAsciiPart.join(""));
  

	
}

function raiseException(e_63618, ename_63619) {
		e_63618.name = ename_63619;
		if ((excHandler == 0)) {
		unhandledException(e_63618);
		}
		
		e_63618.trace = nimCopy(null, raw_write_stack_trace_63468(), NTI43040);
		throw e_63618;

	
}

function chckRange(i_66524, a_66525, b_66526) {
			var Tmp1;

	var result_66527 = 0;

	BeforeRet: do {
			if (!(a_66525 <= i_66524)) Tmp1 = false; else {				Tmp1 = (i_66524 <= b_66526);			}		if (Tmp1) {
		result_66527 = i_66524;
		break BeforeRet;
		}
		else {
		raiseRangeError();
		}
		
	} while (false);

	return result_66527;

}

function chckIndx(i_66505, a_66506, b_66507) {
			var Tmp1;

	var result_66508 = 0;

	BeforeRet: do {
			if (!(a_66506 <= i_66505)) Tmp1 = false; else {				Tmp1 = (i_66505 <= b_66507);			}		if (Tmp1) {
		result_66508 = i_66505;
		break BeforeRet;
		}
		else {
		raiseIndexError(i_66505, a_66506, b_66507);
		}
		
	} while (false);

	return result_66508;

}

function addInt(a_65603, b_65604) {
		    var result = a_65603 + b_65604;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function subInt(a_65621, b_65622) {
		    var result = a_65621 - b_65622;
    if (result > 2147483647 || result < -2147483648) raiseOverflow();
    return result;
  

	
}

function reraiseException() {
		if ((lastJSError == null)) {
		var e_63826 = null;
		e_63826 = {m_type: NTI46666, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_63826.message = nimCopy(null, makeNimstrLit("no exception to reraise"), NTI43040);
		e_63826.parent = null;
		raiseException(e_63826, "ReraiseError");
		}
		else {
			if ((excHandler == 0)) {
			if (is_nim_exception_63077()) {
			unhandledException(lastJSError);
			}
			
			}
			
			throw lastJSError;
		}
		

	
}
var nim_program_result = 0;
var global_raise_hook_60618 = [null];
var local_raise_hook_60623 = [null];
var out_of_mem_hook_60626 = [null];
  if (!Math.trunc) {
    Math.trunc = function(v) {
      v = +v;
      if (!isFinite(v)) return v;

      return (v - v % 1)   ||   (v < 0 ? -0 : v === 0 ? v : 0);
    };
  }

function new_seq_98213(len_98216) {
	var result_98218 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"/home/jiro4989/.choosenim/toolchains/nim-0.20.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 986;
		result_98218 = new Array(len_98216); for (var i=0;i<len_98216;++i) {result_98218[i]=null;}	framePtr = F.prev;

	return result_98218;

}

function is_fat_pointer_66201(ti_66203) {
	var result_66204 = false;

	BeforeRet: do {
		result_66204 = !((ConstSet1[ti_66203.base.kind] != undefined));
		break BeforeRet;
	} while (false);

	return result_66204;

}

function nimCopyAux(dest_66232, src_66233, n_66235) {
		switch (n_66235.kind) {
		case 0:
			break;
		case 1:
			      dest_66232[n_66235.offset] = nimCopy(dest_66232[n_66235.offset], src_66233[n_66235.offset], n_66235.typ);
    
			break;
		case 2:
			    for (var i = 0; i < n_66235.sons.length; i++) {
      nimCopyAux(dest_66232, src_66233, n_66235.sons[i]);
    }
    
			break;
		case 3:
			      dest_66232[n_66235.offset] = nimCopy(dest_66232[n_66235.offset], src_66233[n_66235.offset], n_66235.typ);
      for (var i = 0; i < n_66235.sons.length; ++i) {
        nimCopyAux(dest_66232, src_66233, n_66235.sons[i][1]);
      }
    
			break;
		}

	
}

function add_60638(x_60641, x_60641_Idx, y_60642) {
		      if (x_60641[x_60641_Idx] === null) { x_60641[x_60641_Idx] = []; }
      var off = x_60641[x_60641_Idx].length;
      x_60641[x_60641_Idx].length += y_60642.length;
      for (var i = 0; i < y_60642.length; ++i) {
        x_60641[x_60641_Idx][off+i] = y_60642.charCodeAt(i);
      }
    

	
}

function aux_write_stack_trace_63151(f_63153) {
					var Tmp3;

	var result_63154 = [null];

		var it_63162 = f_63153;
		var i_63164 = 0;
		var total_63166 = 0;
		var temp_frames_63173 = arrayConstr(64, {Field0: null, Field1: 0}, NTI63156);
		L1: do {
				L2: while (true) {
					if (!!((it_63162 == null))) Tmp3 = false; else {						Tmp3 = (i_63164 <= 63);					}				if (!Tmp3) break L2;
					temp_frames_63173[i_63164].Field0 = it_63162.procname;
					temp_frames_63173[i_63164].Field1 = it_63162.line;
					i_63164 += 1;
					total_63166 += 1;
					it_63162 = it_63162.prev;
				}
		} while(false);
		L4: do {
				L5: while (true) {
				if (!!((it_63162 == null))) break L5;
					total_63166 += 1;
					it_63162 = it_63162.prev;
				}
		} while(false);
		result_63154[0] = nimCopy(null, [], NTI43040);
		if (!((total_63166 == i_63164))) {
		if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(makeNimstrLit("(")); } else { result_63154[0] = makeNimstrLit("("); };
		if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(cstrToNimstr(((total_63166 - i_63164))+"")); } else { result_63154[0] = cstrToNimstr(((total_63166 - i_63164))+"").slice(); };
		if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(makeNimstrLit(" calls omitted) ...\x0A")); } else { result_63154[0] = makeNimstrLit(" calls omitted) ...\x0A"); };
		}
		
		L6: do {
			var j_63421 = 0;
			var colontmp__98730 = 0;
			colontmp__98730 = (i_63164 - 1);
			var res_98735 = colontmp__98730;
			L7: do {
					L8: while (true) {
					if (!(0 <= res_98735)) break L8;
						j_63421 = res_98735;
						add_60638(result_63154, 0, temp_frames_63173[j_63421].Field0);
						if ((0 < temp_frames_63173[j_63421].Field1)) {
						if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(makeNimstrLit(", line: ")); } else { result_63154[0] = makeNimstrLit(", line: "); };
						if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(cstrToNimstr((temp_frames_63173[j_63421].Field1)+"")); } else { result_63154[0] = cstrToNimstr((temp_frames_63173[j_63421].Field1)+"").slice(); };
						}
						
						if (result_63154[0] != null) { result_63154[0] = (result_63154[0]).concat(makeNimstrLit("\x0A")); } else { result_63154[0] = makeNimstrLit("\x0A"); };
						res_98735 -= 1;
					}
			} while(false);
		} while(false);

	return result_63154[0];

}

function raw_write_stack_trace_63468() {
	var result_63470 = null;

		if (!((framePtr == null))) {
		result_63470 = nimCopy(null, (makeNimstrLit("Traceback (most recent call last)\x0A") || []).concat(aux_write_stack_trace_63151(framePtr) || []), NTI43040);
		}
		else {
			result_63470 = nimCopy(null, makeNimstrLit("No stack traceback available\x0A"), NTI43040);
		}
		

	return result_63470;

}

function unhandledException(e_63529) {
		var buf_63530 = [[]];
		if (!(((e_63529.message != null ? e_63529.message.length : 0) == 0))) {
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(makeNimstrLit("Error: unhandled exception: ")); } else { buf_63530[0] = makeNimstrLit("Error: unhandled exception: "); };
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(e_63529.message); } else { buf_63530[0] = e_63529.message.slice(); };
		}
		else {
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(makeNimstrLit("Error: unhandled exception")); } else { buf_63530[0] = makeNimstrLit("Error: unhandled exception"); };
		}
		
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(makeNimstrLit(" [")); } else { buf_63530[0] = makeNimstrLit(" ["); };
		add_60638(buf_63530, 0, e_63529.name);
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(makeNimstrLit("]\x0A")); } else { buf_63530[0] = makeNimstrLit("]\x0A"); };
		if (buf_63530[0] != null) { buf_63530[0] = (buf_63530[0]).concat(raw_write_stack_trace_63468()); } else { buf_63530[0] = raw_write_stack_trace_63468().slice(); };
		var cbuf_63601 = toJSStr(buf_63530[0]);
		framePtr = null;
		  if (typeof(Error) !== "undefined") {
    throw new Error(cbuf_63601);
  }
  else {
    throw cbuf_63601;
  }
  

	
}

function raiseRangeError() {
		var e_64445 = null;
		e_64445 = {m_type: NTI46662, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_64445.message = nimCopy(null, makeNimstrLit("value out of range"), NTI43040);
		e_64445.parent = null;
		raiseException(e_64445, "RangeError");

	
}

function raiseIndexError(i_64643, a_64644, b_64645) {
		var e_64802 = null;
		e_64802 = {m_type: NTI46658, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_64802.message = nimCopy(null, (makeNimstrLit("index ") || []).concat(cstrToNimstr((i_64643)+"") || [],makeNimstrLit(" not in ") || [],cstrToNimstr((a_64644)+"") || [],makeNimstrLit(" .. ") || [],cstrToNimstr((b_64645)+"") || []), NTI43040);
		e_64802.parent = null;
		raiseException(e_64802, "IndexError");

	
}

function new_seq_95622(len_95625) {
	var result_95627 = null;

	var F={procname:"newSeq.newSeq",prev:framePtr,filename:"/home/jiro4989/.choosenim/toolchains/nim-0.20.0/lib/system.nim",line:0};
	framePtr = F;
		F.line = 986;
		result_95627 = new Array(len_95625); for (var i=0;i<len_95625;++i) {result_95627[i]=0;}	framePtr = F.prev;

	return result_95627;

}

function raiseOverflow() {
		var e_64046 = null;
		e_64046 = {m_type: NTI46646, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		e_64046.message = nimCopy(null, makeNimstrLit("over- or underflow"), NTI43040);
		e_64046.parent = null;
		raiseException(e_64046, "OverflowError");

	
}

function sys_fatal_56862(message_56866) {
	var F={procname:"sysFatal.sysFatal",prev:framePtr,filename:"/home/jiro4989/.choosenim/toolchains/nim-0.20.0/lib/system/fatal.nim",line:0};
	framePtr = F;
		F.line = 34;
		var e_57007 = null;
		F.line = 37;
		e_57007 = {m_type: NTI46650, parent: null, name: null, message: null, trace: null, raiseId: 0, up: null};
		F.line = 38;
		e_57007.message = nimCopy(null, message_56866, NTI43040);
		F.line = 39;
		raiseException(e_57007, "AssertionError");
	framePtr = F.prev;

	
}

function raise_assert_56858(msg_56860) {
	var F={procname:"assertions.raiseAssert",prev:framePtr,filename:"/home/jiro4989/.choosenim/toolchains/nim-0.20.0/lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 20;
		sys_fatal_56862(msg_56860);
	framePtr = F.prev;

	
}

function failed_assert_impl_57055(msg_57057) {
	var F={procname:"assertions.failedAssertImpl",prev:framePtr,filename:"/home/jiro4989/.choosenim/toolchains/nim-0.20.0/lib/system/assertions.nim",line:0};
	framePtr = F;
		F.line = 27;
		raise_assert_56858(msg_57057);
	framePtr = F.prev;

	
}

function get_neighbour_cells_95034(board_95036, x_95037, y_95038) {
	var result_95040 = null;

	var F={procname:"gameoflife.getNeighbourCells",prev:framePtr,filename:"/home/jiro4989/src/github.com/jiro4989/gameoflife/src/gameoflife.nim",line:0};
	framePtr = F;
		L1: do {
			F.line = 49;
			var y2_95046 = 0;
			F.line = 2610;
			var colontmp__98781 = 0;
			F.line = 2610;
			var colontmp__98782 = 0;
			F.line = 49;
			colontmp__98781 = subInt(y_95038, 1);
			F.line = 49;
			colontmp__98782 = addInt(y_95038, 1);
			F.line = 2620;
			var res_98783 = colontmp__98781;
			L2: do {
				F.line = 2621;
					L3: while (true) {
					if (!(res_98783 <= colontmp__98782)) break L3;
						F.line = 49;
						y2_95046 = res_98783;
						L4: do {
							if (((y2_95046 < 0) || ((board_95036 != null ? board_95036.length : 0) <= y2_95046))) {
							F.line = 51;
							break L4;
							}
							
							L5: do {
								F.line = 52;
								var x2_95057 = 0;
								F.line = 2610;
								var colontmp__98770 = 0;
								F.line = 2610;
								var colontmp__98771 = 0;
								F.line = 52;
								colontmp__98770 = subInt(x_95037, 1);
								F.line = 52;
								colontmp__98771 = addInt(x_95037, 1);
								F.line = 2620;
								var res_98776 = colontmp__98770;
								L6: do {
									F.line = 2621;
										L7: while (true) {
										if (!(res_98776 <= colontmp__98771)) break L7;
											F.line = 52;
											x2_95057 = res_98776;
											L8: do {
												if (((x2_95057 < 0) || ((board_95036[chckIndx(y2_95046, 0, board_95036.length+0-1)-0] != null ? board_95036[chckIndx(y2_95046, 0, board_95036.length+0-1)-0].length : 0) <= x2_95057))) {
												F.line = 54;
												break L8;
												}
												
												if (((x_95037 == x2_95057) && (y_95038 == y2_95046))) {
												F.line = 56;
												break L8;
												}
												
												F.line = 57;
												if (result_95040 != null) { result_95040.push(board_95036[chckIndx(y2_95046, 0, board_95036.length+0-1)-0][chckIndx(x2_95057, 0, board_95036[chckIndx(y2_95046, 0, board_95036.length+0-1)-0].length+0-1)-0]); } else { result_95040 = [board_95036[chckIndx(y2_95046, 0, board_95036.length+0-1)-0][chckIndx(x2_95057, 0, board_95036[chckIndx(y2_95046, 0, board_95036.length+0-1)-0].length+0-1)-0]]; };
											} while(false);
											F.line = 2623;
											res_98776 = addInt(res_98776, 1);
										}
								} while(false);
							} while(false);
						} while(false);
						F.line = 2623;
						res_98783 = addInt(res_98783, 1);
					}
			} while(false);
		} while(false);
	framePtr = F.prev;

	return result_95040;

}

function is_reproduction_95083(self_95085, living_cell_count_95086) {
	var result_95087 = false;

	var F={procname:"gameoflife.isReproduction",prev:framePtr,filename:"/home/jiro4989/src/github.com/jiro4989/gameoflife/src/gameoflife.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((self_95085 == 0))) {
		F.line = 66;
		result_95087 = false;
		break BeforeRet;
		}
		
		F.line = 67;
		result_95087 = (living_cell_count_95086 == 3);
	} while (false);
	framePtr = F.prev;

	return result_95087;

}

function is_generation_95106(self_95108, living_cell_count_95109) {
		var Tmp1;

	var result_95110 = false;

	var F={procname:"gameoflife.isGeneration",prev:framePtr,filename:"/home/jiro4989/src/github.com/jiro4989/gameoflife/src/gameoflife.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((self_95108 == 1))) {
		F.line = 77;
		result_95110 = false;
		break BeforeRet;
		}
		
		F.line = 78;
		F.line = 78;
		switch (living_cell_count_95109) {
		case 2:
		case 3:
			Tmp1 = true;
			break;
		default: 
			Tmp1 = false;
			break;
		}
		result_95110 = Tmp1;
	} while (false);
	framePtr = F.prev;

	return result_95110;

}

function is_underpopulation_95129(self_95131, living_cell_count_95132) {
	var result_95133 = false;

	var F={procname:"gameoflife.isUnderpopulation",prev:framePtr,filename:"/home/jiro4989/src/github.com/jiro4989/gameoflife/src/gameoflife.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((self_95131 == 1))) {
		F.line = 90;
		result_95133 = false;
		break BeforeRet;
		}
		
		F.line = 91;
		result_95133 = (living_cell_count_95132 <= 1);
	} while (false);
	framePtr = F.prev;

	return result_95133;

}

function is_overpopulation_95152(self_95154, living_cell_count_95155) {
	var result_95156 = false;

	var F={procname:"gameoflife.isOverpopulation",prev:framePtr,filename:"/home/jiro4989/src/github.com/jiro4989/gameoflife/src/gameoflife.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		if (!((self_95154 == 1))) {
		F.line = 101;
		result_95156 = false;
		break BeforeRet;
		}
		
		F.line = 102;
		result_95156 = (4 <= living_cell_count_95155);
	} while (false);
	framePtr = F.prev;

	return result_95156;

}

function is_nim_exception_63077() {
		return lastJSError && lastJSError.m_type;

	
}

function next_step_95176(board_95179, board_95179_Idx) {
											var Tmp11;

	var F={procname:"gameoflife.nextStep",prev:framePtr,filename:"/home/jiro4989/src/github.com/jiro4989/gameoflife/src/gameoflife.nim",line:0};
	framePtr = F;
		F.line = 122;
		var new_board_95193 = [];
		L1: do {
			F.line = 123;
			var y_95414 = 0;
			F.line = 123;
			var row_95415 = null;
			F.line = 115;
			var colontmp__98761 = null;
			F.line = 123;
			colontmp__98761 = board_95179[board_95179_Idx];
			F.line = 117;
			var i_98763 = 0;
			F.line = 118;
			var l_98764 = (colontmp__98761 != null ? colontmp__98761.length : 0);
			L2: do {
				F.line = 119;
					L3: while (true) {
					if (!(i_98763 < l_98764)) break L3;
						F.line = 123;
						y_95414 = i_98763;
						F.line = 120;
						row_95415 = colontmp__98761[chckIndx(i_98763, 0, colontmp__98761.length+0-1)-0];
						F.line = 124;
						var new_row_95417 = null;
						L4: do {
							F.line = 125;
							var x_95614 = 0;
							F.line = 125;
							var cell_95615 = 0;
							F.line = 117;
							var i_98758 = 0;
							F.line = 118;
							var l_98759 = (row_95415 != null ? row_95415.length : 0);
							L5: do {
								F.line = 119;
									L6: while (true) {
									if (!(i_98758 < l_98759)) break L6;
										F.line = 125;
										x_95614 = i_98758;
										F.line = 120;
										cell_95615 = row_95415[chckIndx(i_98758, 0, row_95415.length+0-1)-0];
										L7: do {
											F.line = 126;
											F.line = 494;
											var result_95616 = new_seq_95622(0);
											L8: do {
												F.line = 495;
												var it_95814 = 0;
												F.line = 183;
												var colontmp__98752 = null;
												F.line = 126;
												colontmp__98752 = get_neighbour_cells_95034(board_95179[board_95179_Idx], x_95614, y_95414);
												F.line = 185;
												var i_98754 = 0;
												F.line = 186;
												var l_98755 = (colontmp__98752 != null ? colontmp__98752.length : 0);
												L9: do {
													F.line = 187;
														L10: while (true) {
														if (!(i_98754 < l_98755)) break L10;
															F.line = 495;
															it_95814 = colontmp__98752[chckIndx(i_98754, 0, colontmp__98752.length+0-1)-0];
															if ((it_95814 == 1)) {
															F.line = 496;
															if (result_95616 != null) { result_95616.push(it_95814); } else { result_95616 = [it_95814]; };
															}
															
															F.line = 189;
															i_98754 = addInt(i_98754, 1);
															if (!(((colontmp__98752 != null ? colontmp__98752.length : 0) == l_98755))) {
															F.line = 190;
															failed_assert_impl_57055(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.20.0/lib/system/iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
															}
															
														}
												} while(false);
											} while(false);
											var c_95832 = ((Tmp11 = result_95616, Tmp11) != null ? Tmp11.length : 0);
											if ((cell_95615 == 0)) {
											if (is_reproduction_95083(cell_95615, c_95832)) {
											F.line = 129;
											if (new_row_95417 != null) { new_row_95417.push(1); } else { new_row_95417 = [1]; };
											}
											else {
												F.line = 131;
											if (new_row_95417 != null) { new_row_95417.push(0); } else { new_row_95417 = [0]; };
											}
											
											F.line = 132;
											break L7;
											}
											
											if (is_generation_95106(cell_95615, c_95832)) {
											F.line = 135;
											if (new_row_95417 != null) { new_row_95417.push(1); } else { new_row_95417 = [1]; };
											}
											else {
											if (is_underpopulation_95129(cell_95615, c_95832)) {
											F.line = 137;
											if (new_row_95417 != null) { new_row_95417.push(0); } else { new_row_95417 = [0]; };
											}
											else {
											if (is_overpopulation_95152(cell_95615, c_95832)) {
											F.line = 139;
											if (new_row_95417 != null) { new_row_95417.push(0); } else { new_row_95417 = [0]; };
											}
											else {
												F.line = 141;
												reraiseException();
											}
											}}
										} while(false);
										F.line = 121;
										i_98758 = addInt(i_98758, 1);
										if (!(((row_95415 != null ? row_95415.length : 0) == l_98759))) {
										F.line = 122;
										failed_assert_impl_57055(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.20.0/lib/system/iterators.nim(122, 11) `len(a) == L` the length of the seq changed while iterating over it"));
										}
										
									}
							} while(false);
						} while(false);
						F.line = 142;
						var Tmp12 = nimCopy(null, new_row_95417, NTI95416);
						if (new_board_95193 != null) { new_board_95193.push(Tmp12); } else { new_board_95193 = [Tmp12]; };
						F.line = 121;
						i_98763 = addInt(i_98763, 1);
						if (!(((colontmp__98761 != null ? colontmp__98761.length : 0) == l_98764))) {
						F.line = 122;
						failed_assert_impl_57055(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.20.0/lib/system/iterators.nim(122, 11) `len(a) == L` the length of the seq changed while iterating over it"));
						}
						
					}
			} while(false);
		} while(false);
		F.line = 144;
		board_95179[board_95179_Idx] = nimCopy(null, new_board_95193, NTI95015);
	framePtr = F.prev;

	
}

function nextStep(b_97031) {
	var result_97032 = null;

	var F={procname:"gameoflife_js.nextStep",prev:framePtr,filename:"/home/jiro4989/src/github.com/jiro4989/gameoflife/js/gameoflife_js.nim",line:0};
	framePtr = F;
	BeforeRet: do {
		F.line = 5;
		L1: do {
			F.line = 837;
			var i_97035 = 0;
			F.line = 838;
			var result_97036 = new_seq_98213(chckRange((b_97031 != null ? b_97031.length : 0), 0, 2147483647));
			L2: do {
				F.line = 839;
				var it_98245 = null;
				F.line = 185;
				var i_98724 = 0;
				F.line = 186;
				var l_98725 = (b_97031 != null ? b_97031.length : 0);
				L3: do {
					F.line = 187;
						L4: while (true) {
						if (!(i_98724 < l_98725)) break L4;
							F.line = 839;
							it_98245 = b_97031[chckIndx(i_98724, 0, b_97031.length+0-1)-0];
							F.line = 5;
							L5: do {
								F.line = 837;
								var i_98250 = 0;
								F.line = 838;
								var result_98251 = new_seq_95622(chckRange((it_98245 != null ? it_98245.length : 0), 0, 2147483647));
								L6: do {
									F.line = 839;
									var it_98624 = 0;
									F.line = 185;
									var i_98720 = 0;
									F.line = 186;
									var l_98721 = (it_98245 != null ? it_98245.length : 0);
									L7: do {
										F.line = 187;
											L8: while (true) {
											if (!(i_98720 < l_98721)) break L8;
												F.line = 839;
												it_98624 = it_98245[chckIndx(i_98720, 0, it_98245.length+0-1)-0];
												F.line = 5;
												result_98251[chckIndx(i_98250, 0, result_98251.length+0-1)-0] = chckRange(it_98624, 0, 255);
												F.line = 841;
												i_98250 = addInt(i_98250, 1);
												F.line = 189;
												i_98720 = addInt(i_98720, 1);
												if (!(((it_98245 != null ? it_98245.length : 0) == l_98721))) {
												F.line = 190;
												failed_assert_impl_57055(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.20.0/lib/system/iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
												}
												
											}
									} while(false);
								} while(false);
							} while(false);
							result_97036[chckIndx(i_97035, 0, result_97036.length+0-1)-0] = nimCopy(null, result_98251, NTI95626);
							F.line = 841;
							i_97035 = addInt(i_97035, 1);
							F.line = 189;
							i_98724 = addInt(i_98724, 1);
							if (!(((b_97031 != null ? b_97031.length : 0) == l_98725))) {
							F.line = 190;
							failed_assert_impl_57055(makeNimstrLit("/home/jiro4989/.choosenim/toolchains/nim-0.20.0/lib/system/iterators.nim(190, 11) `len(a) == L` the length of the seq changed while iterating over it"));
							}
							
						}
				} while(false);
			} while(false);
		} while(false);
		var board_98669 = [nimCopy(null, result_97036, NTI95015)];
		F.line = 6;
		next_step_95176(board_98669, 0);
		F.line = 7;
		result_97032 = nimCopy(null, board_98669[0], NTI95015);
		break BeforeRet;
	} while (false);
	framePtr = F.prev;

	return result_97032;

}
